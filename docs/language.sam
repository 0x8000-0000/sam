sam: utf-8 

title: Semantic Authoring Markdown (SAM)

    section: Annotations

        Annotations clarify what a piece of text is about. The annotated text
        is placed in square brackets, and the annotation follows immediately
        in parentheses. (There must be no space between the closing square bracket
        and the opening parentheses.)

        ```(sam)
        In [Rio Bravo](movie), [the Duke](actor "John Wayne" (SAG)) plays
        a union colonel.
        ```

        There are three parts to the annotation:

        |type| The first word immediately following the opening
        parentheses is the type of the subject being annotated. In the sample
        above, "Rio Bravo" is a movie and "the Duke" is an actor.

        |specifically| In some cases, the annotated text may not specify the
        subject clearly. In this case, the specifically attribute is use
        to clarify what is meant. In the sample above, "the Duke" means, specifically,
        "John Wayne".

        |namespace| In some cases, it is necessary to specify the namespace to which
         the annotated term belongs. In the sample above, the name of the actor
         "John Wayne" is part of a set of names managed by the Screen Actors Guild
         which makes sure two actors don't use the same stage name. (In most cases,
         the namespace is implied by the type, so you will not usually need to
         specify it.)

    section: Repeated annotations

        If you are annotating the same phrase more than one in the same file. You
        can skip the annotation metadata and just use square brackets around the phrase.
        The parser will
        copy the metadata from the last occurring instance of that same phrase.

        ```(sam)
        [foo](bar "baz") gruznatz [foo]
        ```

	section: Inserts

	    Insertions are indicated by >> followed by parentheses containing the type and identity of the
	    thing to be inserted. SAM knows nothing about the types of things you might
	    insert. It simply passes on the type to the processing application.

	    The parameters of an insertion are different from those of an annotation. They are:

	    1. the type of the annotation
	    2. the URI of the material to be inserted
	    4. an id, consisting of a # followed by a name (such as "#foo")
	    5. one or more conditions, consisting of ? followed by a token

    section: Conditions

        Conditions are indicated in annotations, blocks, and inserts using a question mark followed
        by a token.

        SAM itself does not execute conditions, it merely encodes them for later
        processing. Therefore it has no idea what the tokens mean or how they will
        be interpreted. However, using simple tokens is recommended as a best practice.


    section: Blocks

        Blocks are indicated by a token followed by a semicolon at the start of a line.

        Blocks can have metadata in parens that follow the colon with no space:

        ```
        section:(?ultra)
            The ultra feature is really cool!
        ```

        Block metadata can include:

        * Condition token, which start with a ?
        * IDs, which start with #
        * A string, in quotes, known as the specifically attribute. The specifically
        attribute exists to specify and clarify what is being annotated.

     section: Fragments

        Fragments are created by a token followed by an open curly brace at the start
        of a line:

        ```sam
        my-fragment{

        Some stuff.

        Some more stuff
        }
        ```

	section: Shortcuts for inserts
        # string
		>>$this.string

		# reference
		>>#this.ref

    section: Blockquotes

    Three quotation marks in a row are a shortcut for the implicit
    element "blockquote".

    ```(sam)
    """(citation)
        Quoted
    ```

    You can achieve the same effect by using the literal name blockquote
    (which is then just like any other block element, except that its
    attribute is recognized as a citation):

    ```(sam)
    blockquote:(citation)
        Quoted
    ```


    section: Alternate blockquotes

    Standard blockquotes may conflict with embedding in other languages such as
    Python docstrings.

    ```(sam)
    '''(citation)
        Quoted


    The difference between code ``` and quote """ is that code signals a different
    encoding. The content of the code block is not processed as sam markup until
    the closing ``` is seen.

    In the event that the end marker for the codeblock would appear in the
    codeblock, the writer can add arbitrary characters after
    ``` in the top and bottom markers to assure they are distinct.

    In a blockquote, however, the material inside the quote block is still SAM
    markup and is processed as such.

section: Lists

    You can create any kind of list you like by using nested blocks.

    ```(SAM)
    ul:
        li: Dog
        li: Hen
        li: Spoon

    ```

    Shortcuts for ordered and unordered lists are supported.

    Unordered lists begin with a line starting with an asterisk.

    ```(SAM)
    * Dog
    * Hen
    * Spoon
    ```

    Ordered lists begin with a number followed by a period.

    ```(SAM)
    0. Robot
    12. Spaceship
    7. Ray gun
    ```

    Labeled lists begin with a label between pipe characters.

    ```(SAM)
    |fa| A long long way to run.
    |so| A needle pulling thread.
    |la| A note to follow so.
    ```


    Lists continue until:

    * The next non-blank line at the same indent that does not start with a list marker.
    * The next non-blank line that is less indented.
    * The end of the file.

    List items continue until:

    * The next para at the same indent that starts with a list marker.
    * The end of the list.