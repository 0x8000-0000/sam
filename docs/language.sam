sam: 

specification: Semantic Authoring Markdown (SAM) 

    Semantic Authoring Markdown (SAM) is a simplified markup for semantic authoring. Semantic authoring, in this case, means writing texts that identify some part of their semantics thought embedded markup. 
    
    Current lightweight markup languages have fixed semantics with little or no extensibility. Where extensibility exists, it generally requires coding extensions to the parser. 
    
    XML allows extension through schemas. But the price it pays for this is an abstract data model and a verbose syntax. Writing and editing in XML is cumbersome, even with a dedicated XML editor (and dedicated XML editors can be expensive). And while XML is intended for doing structured writing, in practice it tends to hide the structure of the content either behind a WYSIWYG editing interface or verbose markup.
    
    SAM attempts to bridge these two worlds, providing a lightweight syntax that is easy to read, writes, and edit, and which makes the structured of the content clear and explicit. But also provides a lightweight abstract syntax of blocks and annotations that supports extension, either through ad hoc markup or through a schema. 
    
    Unlike most lightweight markup languages, SAM is not designed to output directly to final format, but to output an intermediate XML format which can then be processes to produce final output. 
    
    Syntactically, SAM takes its cues from YAML and Python (for displaying overall structure), from Markdown (for displaying text structures) and from common English usage (for displaying annotations.) In contrast to some of the richer lightweight markup languages, it tries to minimize the use of exotic forms of punctuation to delineate structures. 
    
    The intention is that an author writing in SAM should feel no need to use a visual editor, but should work directly in raw SAM (albeit with editor-supplied syntax coloring if desired). A SAM document should be a very natural read. 

    SAM is not designed to be a full replacement for XML. It is far less general, because of its use of specific syntax for common text structures such as lists and paragraphs, and it has very limited support for attributes. Basically, each structure as a fixed set of attributes available. There is no extensibility for attributes. This is essential to maintain the readability of SAM sources, but it limits certain styles of markup design. 
    
    In particular, it is designed to support a declarative approach to semantic authoring meaning that it is designed to express declarations about the structure of the document and the meaning of the text, rather than to embed management and processing information into the source, a practice common in many structured authoring languages. 

    Document-oriented markup languages such as reStructuredText and Markdown tend to be very flat in structure. One things follows another. There is rarely a case where one thing is inside another. For example, these languages use heading levels, but don't delineate sections of the document. More semantically rich languages tend to be more hierarchical, with one structure inside another. For example, a document might be divided into sections with title and paragraph elements inside a section. This means that you need to show which structures are inside others and where the containing structure ends. 

    XML does this by having an explicit end tag for every element. A large part of the verbosity of XML comes from its requirement to close every element tag. Many programming languages, which similarly have to express nested structures, use some form of brackets to delineate each structure. Python is an exception to this. It uses indentation to express the relationship between structures. This is a far more natural way for writers to express the subordination of elements -- one that is sometimes used in printed works. SAM uses this approach and avoids the use of end tags in all cases but one (codeblocks containing non-SAM markup). When a schema is used, SAM can also take clues from the schema to determine where structures begin and end. This can reduce the need to indent structures in the text. 

    SAM supports the use of schemas to specify the allowed structure of a document type. The parser can use the schema to determine when a structure is complete, reducing the need for indenting. If you use SAM without a schema, you will need to use indenting throughout to correctly represent structure. 

    While XML has only one unit of structure, the element, SAM has several: 

    |blocks| Blocks are elements that contain other elements. For instance, a section is a block. 

    |fields| Fields are elements that contain individual values. For instance, the date a document was written is usually a field. 

    |lines| A line is a single line of text, as in a poem, with a fixed line end. 

    |paragraphs| A paragraph is a continuous block of text across one or more contiguous lines. 

    |flows| Flows are sequences of text. Paragraphs are flows. Lines are flows. String definitions are flows. Fields are flows. Flows cannot contain blocks or fields. 

    |record sets| A record set is a simple database table with named columns. It allows you to capture tabular data at a logical level rather than at the presentation level of a table. 

    |embedded XML| You can embed XML in a SAM document. 

    |strings| Strings are flows that have been assigned a name so that they can be included by reference in other parts of a document or in other documents. 

    |fragments| Fragments are sections of a documents (potentially larger than a single flow) that can be included by reference in other parts of a document or in other documents. Strings used in a fragment can be redefined when a fragment is reused, allowing you to vary the text of the fragment when it is used in different places. 

    |annotations| Annotations are elements within a flow that have been annotated with semantic metadata to indicate something about their subject matter. 

    |insertions| Insertions bring in content from an external source.

    section: Sam declaration 

        A SAM file starts with a sam declaration, which much start at the beginning of the first line. 

        ```(sam) 
        sam: 
        ``` 

        The sam declaration may specify the location of a schema file. The location will be processed through an XML catalog if one is specified. 

        ```(sam) 
        sam: http://spfeopentoolkit.org/spfe-docs/topic-types/think-plan-do-topic/schemas/authoring/think-plan-do-topic.sams 
        ``` 

        If the sam declaration does not specify a schema, it may specify a namespace URI. All elements will be output in that namespace. (Namespaces may not be assigned on individual elements.) If a schema is specified, namespaces will be assigned in the schema. 

        ```(sam) 
        sam: {http://spfeopentoolkit.org/ns/spfe-docs} 
        ``` 

    section: Annotations 

        Annotations clarify what a piece of text is about. The annotated text is placed in square brackets, and the annotation follows immediately in parentheses. (There must be no space between the closing square bracket and the opening parentheses.) 

        ```(sam) 
        In {Rio Bravo}(movie), {the Duke}(actor "John Wayne" (SAG)) plays a union colonel. 
        ``` 

        There are three parts to the annotation: 

        |type| The first word immediately following the opening parentheses is the type of the subject being annotated. In the sample above, "Rio Bravo" is a movie and "the Duke" is an actor. 

        |specifically| In some cases, the annotated text may not specify the subject clearly. In this case, the specifically attribute is use to clarify what is meant. In the sample above, "the Duke" means, specifically, "John Wayne". 

        |namespace| In some cases, it is necessary to specify the namespace to which the annotated term belongs. In the sample above, the name of the actor "John Wayne" is part of a set of names managed by the Screen Actors Guild which makes sure two actors don't use the same stage name. (In most cases, the namespace is implied by the type, so you will not usually need to specify it.) 

    section: Repeated annotations 

    If you are annotating the same phrase more than one in the same file. You can skip the annotation metadata and just use square brackets around the phrase. The parser will copy the metadata from the last occurring instance of that same phrase. 

    ```(sam) 
    [foo](bar "baz") gruznatz [foo] 
    ``` 

    section: Inserts 

        Insertions are indicated by >> followed by parentheses containing the type and identity of the thing to be inserted. SAM knows nothing about the types of things you might insert. It simply passes on the type to the processing application. 

        The parameters of an insertion are different from those of an annotation. They are: 

        1. the type of the annotation 
        2. the URI of the material to be inserted 
        3. an id, consisting of a # followed by a name (such as "#foo") 4. one or more conditions, consisting of ? followed by a token 

    section: Citations 

        Citations are any reference to another resource. This includes internal references to other structures within the file, such as to a graphic,procedure, or footnote, as well as references to external works. 

        To cite a resource that has an id within the current SAM document, reference the id like this: 

        ```(sam) 
        Moby Dick is about a big fish[*moby]. See [*whale]. 

        fig:(*whale) 
            >>(image whale.png) 

        footnote:(*moby) 
            Actually, Moby Dick is a whale, not a fish. 

        ``` 

        To cite a named resource within your content set, reference the name like this: 

        ```(sam) 
        Moby Dick[#MobyDick] is about a big fish. 
        ```

        This assumes that there is a bibliographic entry with the named `MobyDick` somewhere in your content set. 

        To cite an external work without referring to another resource in your content set, use a standard reference syntax. 

        ```(sam) 
        Moby Dick[Melville, 1851] is about a big fish. 
        ``` 

        SAM does not attempt to decode the format of this style of citation. It just delivers it as a string. 

        However, if we decide to do patterns, than your could use a pattern to validate and analyze the citation into its constituent parts in the schema. 

    section: Conditions 

        Conditions are indicated in annotations, blocks, and inserts using a question mark followed by a token. 

        SAM itself does not execute conditions, it merely encodes them for later processing. Therefore it has no idea what the tokens mean or how they will be interpreted. However, using simple tokens is recommended as a best practice. 

    section: Blocks 

        Blocks are indicated by a token followed by a semicolon at the start of a line. 

        Blocks can have metadata in parens that follow the colon with no space: 

        ``` 
        section:(?ultra) The ultra feature is really cool! 
        ``` 

        Block metadata can include: 

        * Condition token, which start with a ? 
        * Names, which start with # 
        * IDs, which start with * 
        * A string, in quotes, known as the specifically attribute. The specifically attribute exists to specify and clarify what is being annotated. 

    section: Paragraphs 

        Syntactically, a paragraph is sequence of lines ending with a blank line, and does not start with any markup that makes it look like any other structure. 

        Logically, a paragraph is a block that contains a flow. The content model of a paragraph is thus simply a flow. The flow, in turn can contain annotations, decorations, insertions, and citations. 

        A paragraph cannot have block children. It is a syntax error to have anything indented under a paragraph. Logically, the content model of the implicit element {p}(implicit-element) is a flow, so it can't have any other children. 

        If you desperately want to create paragraphs that have block children, you could create an alternative block type for them, such as `para`. This is generally a bad idea, as it create unnecessary complexity. A common reason for doing this it to make lists children of paragraphs. The argument for this is that the list is part of the argument of the paragraph and so part of the paragraph as a unit of composition. However, in almost all cases, a paragraph in a markup language is not a unit of composition or meaning, but a typographic unit. Unless you need to support some very specific forms of linguistic analysis, you don't need paragraphs to have children. 

    section: Names and IDs 
    
        Blocks can be assigned names and IDs. Both are used to reference the block from elsewhere in the content. The difference is that ids are local to the current document and must be unique within the current document. If a duplicate ID is found, the parser will raise an error. 

        Names are merely assigned to the block by the parser. No namespace or uniqueness constraints are enforced. It is up to the application to decide how name are used. However, it is considered a SPFE idiom that names are scoped to the type of objects they apply to. In other words, fragment names are in a different namespace from string names. 

        This implies that string references are distinct from fragment references. 

    section: Fragments 

        Fragments are created by a token followed by an open curly brace at the start of a line: 

        ```(sam) 
            ~~~(#my-fragment ?bar) 
                $color=black 
                Bar bar >>($color) sheep Have you any wool? 
        ``` 

        The content of the fragment must be indented, and the closing brace must be at the same indentation level as the opening one. 

    section: Insert a fragment 

        To insert a fragment: 

        ```(sam) 
        >>(~my-fragment) 
        ```
        
        Any strings defined within a fragment are scoped to that fragment. You can override these strings when you insert the fragment. In fact, you can override any in-scope strings in a fragment insert. String definitions must each be on a line by themselves. 

        >>(~my-fragment) 
            $color=white 

        Note that the SAM syntax is designed to bear these semantics, but that the SAM parser does not implement them. It simply passes them on to whatever processor you are using, which is free to implement different rules for string handling. 

    section: Shortcuts for inserts

        # string 
        >>($this.string) 
        >>(string this.string) 

        # reference >>(#this.ref) >>(ref this.ref) 

    section: Blockquotes 

        Three quotation marks in a row are a shortcut for the implicit element "blockquote". 

        ```(sam) 
        """(citation) 
            Quoted 
        ``` 

        You can achieve the same effect by using the literal name blockquote (which is then just like any other block element, except that its attribute is recognized as a citation): 

        ```(sam) 
        blockquote:(citation) 
            Quoted 
        ``` 

    section: Alternate blockquotes 

        Standard blockquotes may conflict with embedding in other languages such as Python docstrings. 

        ```(sam) 
        '''(citation) 
            Quoted 
        ```
        
        The difference between code {```}(code) and quote `"""` is that code signals a different encoding. The content of the code block is not processed as sam markup until the closing {```}(code) is seen. 

        In the event that the end marker for the codeblock would appear in the codeblock, the writer can add arbitrary characters after {```}(code) in the top and bottom markers to assure they are distinct. 

        In a blockquote, however, the material inside the quote block is still SAM markup and is processed as such. 

    section: Lines 
    
        Lines are pieces of text with fixed line endings, such as poems. To create a set of lines, precede each one with a pipe character followed by a space. 

        ```(sam) 
        | You gotta walk that lonesome valley, 
        | You gotta walk it by yourself, 
        | Nobody here can walk it for you, 
        | You gotta walk it by yourself. 
        ``` 

        You can also add ids or conditions to lines. In this case, the opening parentheses of the annotation must follow the leading pipe character immediately, and the closing parenthesis must be followed by a space: 

        ```(sam) 
        |(#foo) You gotta walk that lonesome valley, 
        | You gotta walk it by yourself, 
        |(?bar) Nobody here can walk it for you, 
        | You gotta walk it by yourself. 
        ``` 

        All spaces after a the space following the pipe are considered significant and are retained on output. 

    section: Lists 

        You can create any kind of list you like by using nested blocks. 

        ```(SAM) 
            ul: 
                li: Dog 
                li: Hen 
                li: Spoon 

        ``` 

        Shortcuts for ordered and unordered lists are supported. 

        Unordered lists begin with a line starting with an asterisk. 

        ```(SAM)
        * Dog 
        * Hen 
        * Spoon 
        ``` 

        Ordered lists begin with a number followed by a period. 

        ```(SAM) 
        0. Robot 
        12. Spaceship 
        7. Ray gun 
        ``` 

        Labeled lists begin with a label between pipe characters. There must be no space between the opening pipe character and the start of the label text. 

        ```(SAM) 
        |fa| A long long way to run. 
        |so| A needle pulling thread. 
        |la| A note to follow so. 
        ``` 

        Lists continue until: 

        * The next non-blank line at the same indent that does not start with a list marker. 
        * The next non-blank line that is less indented. 
        * The end of the file. 

        List items continue until: 

        * The next para at the same indent that starts with a list marker. 
        * The end of the list. 

    section: Reserved insert types 

        ref string image video audio feed app 

        These are reserved so that editors can act on them. 

        section: Whitespace handling All flows are trimmed of leading and trailing whitespace. In composing a flow from multiple text lines, all spaces and returns are collapsed to a single space. 

        In codeblocks, all whitespace is retained. However, codeblocks do not have to follow the indenting of the rest of the document, so you can left-align code to achieve correct indenting of the code itself. 
    
    section: Embedded XML
    
        The embedded XML must begin with an XML declaration on a line by itself (typically `<?xml version="1.0" encoding="UTF-8"?>`). The XML fragment that follows must be well formed and must end on a line by itself. The SAM parser parses the embedded XML block to determine if it is well formed and to find its end. It then outputs the original XML from the SAM document, not the parser output. Therefore there will be no resolution of entities on the embedded XML. 

