sam: {http://spfeopentoolkit.org/ns/spfe-docs}

# This file is part of the SPFE Open Toolkit. See the accompanying license.txt file
 # for applicable licenses.
# (c) Copyright Analecta Communications Inc. 2015 All Rights Reserved.

# Need test for unicode characters and numbers in names.


tests:

    test: Character entities

        case: HTML named entities

            The doggy in the window costs &pound;5.00.

        case: Numeric entities

            The doggy in the window costs &#163;5.00.

        case: Hexadecimal entity

            The doggy in the window costs &#xA3;5.00.

        case: In code annotation shortcut:

            The doggy in the window costs `&#xA3;`5.00.

        case: In bold annotation shortcut:

            The doggy in the window costs *&#xA3;*5.00.

    test: Conditions on list items

        case: Conditions on unordered list shortcut

            * Fred

            *(?foo) Barney and
          Betty and
          Bam Bam.

            * Wilma

        case: Conditions on ordered list shortcut

            1. Fred
            2.(?foo) Barney and
             Betty and
             Bam Bam.
            3. Wilma

    test: Blank annotations

        case: Blank annotation

            The {annotation} has no metadata. It should produce a warning, but no annotation in XML.

    test: Escapes in annotations

        case: Quotes inside phrase:

        `pubwork="book"` is an attribute on the element `citetitle`.

        `pubwork=\"book\"` is an attribute on the element `citetitle`.


        case: Escapes in explicit annotations

            There is a curly brace in {this \\\\\{ annotation}(bold).

        case: Escapes in decorations

            There is a curly brace in `this \{` mono decoration.

            There is a back tick in `this \`` mono decoration.

            There is a back tick in "this \`" quotes decoration.

            There is a quote in "this \"" quotes decoration.

            There is a `*` in *this \* bold* decoration.

            There is a `_` in _this \_ italic_ decoration.

    test: Paragraph continuation

        case: Multiple lines joined to create one paragraph

            This is a {paragraph}(?foo)
            that wraps across
            multiple lines.

    test: Numbered lists

        case: Numbered list with spaces

            0. One

            0. Two

            99999. Three

        case: Numbered list no spaces

            0. One
            0. Two this
               paragraph wraps.

             This is another para in the list.
            99999. Three

        case: Numbered list mixed spacing

            0. One

            0. Two
            99999. Three

            7. Four



    test: Nested numbered lists

        case: Nested numbered list with spaces

            0. One

            0. Two

                5. Two and a quarter

                6. Two and a half

                9. Two and three quarters 2

            99999. Three

            7. Four


        case: Nested numbered list with no spaces

            0. One
            0. Two
                5. Two and a quarter
                6. Two and a half
                9. Two and three quarters 3
            99999. Three
            7. Four

        case: Nested numbered list with mixed spacing 1

            0. One
            0. Two
                5. Two and a quarter
                6. Two and a half

                9. Two and three quarters 4

            99999. Three
            7. Four

        case: Nested numbered list with mixed spacing 2

            0. One
            0. Two
                5. Two and a quarter
                6. Two and a half

                9. Two and three quarters 5
            99999. Three

            7. Four

    test: Unordered lists

        case: Unordered list with spaces

            * One
            * Two

            * Three

        case: Unordered list no spaces

            * One
            * Two
            * Three

        case: Unordered list mixed spacing

            * One

            * Two
            * Three

            * Four



    test: Nested unordered lists

        case: Nested list with spaces

            * One

            * Two

                * Two and a quarter

                * Two and a half

                * Two and three quarters 6

            * Three

            * Four


        case: Nested unordered list with no spaces

            * One
            * Two
                * Two and a quarter
                * Two and a half
                * Two and three quarters 7
            * Three
            * Four

        case: Nested unordered list with mixed spacing 1

            * One
            * Two
                * Two and a quarter
                * Two and a half

                * Two and three quarters 8

            * Three
            * Four

        case: Nested unordered list with mixed spacing 2

            * One
            * Two
                * Two and a quarter
                * Two and a half

                * Two and three quarters 9
            * Three

            * Four

    test: Nested mixed lists

        case: Nested mixed lists with spaces

            0. One

            0. Two

                * Two and a quarter

                * Two and a half

                * Two and three quarters 10

            99999. Three

            7. Four


        case: Nested mixed lists with no spaces

            * One
            * Two
                5. Two and a quarter
                6. Two and a half
                9. Two and three quarters 11
            * Three
            * Four

        case: Nested numbered lists with mixed spacing 1

            0. One
            0. Two
                * Two and a quarter
                * Two and a half

                * Two and three quarters 12

            99999. Three
            7. Four

        case: Nested mixed lists with mixed spacing 2

            * One
            * Two
                5. Two and a quarter
                6. Two and a half

                9. Two and three quarters 13

            * Three

            * Four

    test: One list after another

        case: Space between lists

            * One
            * Two
            * Three

            1. One
            2. Two
            3. Three


        case: No space between lists

            1. One
            2. Two
            3. Three this
               paragraph wraps.
            * One
            * Two
            * Three

    test: XML reserved characters in attributes

        case: XML reserved characters in citation specifically

            {Skimbleshanks}(animal '"Old  <>& Possum"' (Eliott)).

        case: Quotes in link shortcut.

            This is a {link text}(thing 'somthing "specific"' (foo)).

    test:(#feature-fragments) Fragments
        head:(#foo)
            foo: barney {and}(conjunction) betty
            baz: bat
            $name=fred {and}(conjunction) wilma
            history:
                revision:: date, author, comment, status
                    2014-06-23, mbaker, New\, Topic, In progress
            index:
                entry:: type, term
                    feature, fragment
                    feature, fragments
        body: How Fragments Work

            * This list is the
                * Nested list
                * with two entries

            * first thing in this section.
            * There is no space between these list items.

            This paragraph contains a line {Wikipedia}(http://wikipedia.com (goo)).

            This paragraph contains a line {Wikipedia}(link "http://wikipedia.com").

            5. Five
                0. Five and a half

                0. Five and three quarters

            6. Six

            7. Seven

            8. Eight and
               a half.

            9. Nine

            10. Ten

            {Fragments}(feature) are a {content reuse}(task "reusing content" (foo))
            feature of the {EPPO-simple}(feature) {plugin}( feature).[*bar]

            \{Fragments}(feature) are a \{content reuse}(task "reusing content" (foo))
            feature of the \{EPPO-simple}(feature) \{plugin}( feature).[*bar]

            \[Fragments](feature) are a \[content reuse](task "reusing content" (foo))
            feature of the \[EPPO-simple](feature) [plugin]( feature).[Melville, 1851]

            Press \[Enter].

            Press {Enter}(key)

            Suppose you discovered that your users were using your help content far more
            than your manuals and wanted to force your writers to break away from this
            habit of creating book-like help systems. You would introduce[*bar]
            constraint that writers were to focus on producing self sufficient
            help topics rather than linear narratives. You could enforce
            that constrain by edict, or through a style guide, but you would
            get better compliance if you introduced a structured writing system
            that enforced that constraint.

            footnote:(*bar)
                This is a footnote.



            >>>(image foo.gif #bar ?baz ?bat)

            This sentence includes a string reference >(string name). And a shortcut version >($name)

            """[*bing bang boom]
                |(#foo2) You gotta walk that lonesome valley,[*bing bang boom]
                | You gotta walk it by yourself,
                |(?bar) Nobody here can walk it for you,
                |    You gotta walk it by yourself.


            This sentence[*bing bang boom] contains an unmatched { followed by an {annotated}(word) phrase.

            |(#foo2) You gotta walk that lonesome valley,[*bing bang boom]
            | You gotta walk it by yourself,
            |(?bar) Nobody here can walk it for you,
            |    You gotta walk it by yourself.


            ~~~(#foo3 ?gruz-natz)
                $a=apple
                $b=banana

                This is a sentence inside a fragment.

                ~~~(#gruznatz)
                    $p=peach

                    This is a nested fragment.

            >>>(~foobar)
                $a=apricot
                $b=breadfruit

            ```
            foo
            ```

            This {sentence}(grammatical-construct) contains a repeated annotation: the word
            {sentence} without any annotation metadata. It should be annotated the same as
            the previous instance. If you just want braces around the word
            \{sentence} you need to precede it with a backslash.

            This sentence also references the word {sentence} and should be annotated on output.

            A fragment is an \{arbitrary\}\\ sequence of *text structures* (paragraphs, lists,
            etc.) that _has been given_ an id so that it can be \\{included}(bold) by reference at other
            \_points_ in the content.

            ```kkk(xml1.0 #foo4 ?bar)[c:/foo]
            <fragment id="test-fragment">
                <local-strings>
                    <string id="test-string-1"><bold>test string one</bold></string>
                    <string id="test-string-2"><italic>test string two</italic></string>
                </local-strings>
                <p>This is a piece of text in a fragment. It includes references to local
                strings <string-ref id-ref="test-string-1"/> and <string-ref id-ref="test-string-2"/>.
                And to a global string <string-ref id-ref="product"/></p>
            </fragment>
            <p>The following is a reference to the fragment defined above:</p>
            <fragment-ref id-ref="test-fragment">
                <local-strings>
                    <string id="test-string-1"><code>this is test string number one</code></string>
                </local-strings>
            </fragment-ref>
            ```kkk

            table:(*my-table ?foobat #zombie) An important table
                row:: cell, cell, cell
                    foo, bar, baz
                    a, b, c
                    hi, lo, med

            terminal:
                prompt: $
                input: dir
                response: Empty directory.

            After this paragraph, there is a blockquote:

            """(*foo #bar ?baz)
                The quick brown fox jumps over the lazy dog.

                And the {cow}(beast "bovine")[Mother Goose] jumps over the moon.

            blockquote:[http://example.com/page]
                Wafting zyphers quickly vexed jumbo.

                Far and few are the lands where the jumblies live.


            This is another paragraph. Then there is an alternate blockquote:

            '''( #foo5 ?bar ?baz)[Mother Goose]
                The quick brown fox jumps over the lazy dog.

            '''
                This is a blockquote without a citation.

            Fragments can be defined:

            * inline in a topic file

            * in separate fragment
              collections

              foobar

            * batman


            If a fragment is defined inline, it is included where it occurs. {Fragments}(song) in fragment
            files are not included anywhere unless they are pulled in by a fragment reference.

            0. One
               Hundred

               Fifty

            4. Seven

            80976. Two

                   Two and a half



            A fragment reference inserts a fragment by ID at the place it occurs in the text.

            <?xml version="1.0" encoding="UTF-8"?>
            <foo bar="bat">
                <bang/>
            </foo>


            Fragments are recursive. That is, {Fragments} can \{contain} other fragments and
            fragment references.

            <?xml version="1.0" encoding="UTF-8"?>
            <foo bar="bat">
                <boo/>
                <hoo/>
            </foo>

            Because you often want to >(image "foo.gif" #bar ?baz ?bat) change some part of a text when it is being
            reused, <fragments> & fragment references can both define local {strings}(feature).
            Any {string references}(feature) inside a fragment will be resolved by looking first
            at local-strings defined in the >(*my-table) fragment reference, then at local strings defined
            in the fragment definition, and then at global strings. In effect, this means
            that you can define string substitutions whenever you insert a fragment into your content.

            state-detection:
                sign: printer "the printer"
                    signal: chirps
                    signal: beeps twice
                sign: indicator "the indicator"
                    signal: red
                    signal: yellow
                    signal: green
                state: success "retrieve print job"
                    printer: chirps
                    indicator: green
                state: jammed "clear paper jam"
                    printer: beeps twice
                    indicator: yellow
                state: broken "call the service desk"
                    printer: beeps twice
                    indicator: red

            |p| The p element represents a paragraph. It is recognized as a block of
            lines with no leading tag. It ends with a blank line. p elements are the
            only elements that can contain decorations and annotations.
            |bold|(*foo2 ?bar #bat) The bold element is a decoration occurring within text and is
            indicated by surrounding the text with asterisks.
            |{italic}(style "|")| The italic | decoration is indicated by surrounding the text
            with underscores.
            |quotes| The quotes decoration is indicated by surrounding the text
            in straight quotes.
            |mono| The mono decoration is indicated by backticks

            index:
                    entry:: type, term
                        feature, fragment
                        feature, fragments